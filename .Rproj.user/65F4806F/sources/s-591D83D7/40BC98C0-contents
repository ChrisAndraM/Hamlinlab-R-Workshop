---
title: "Introduction to R"
subtitle: "Why R is awesome and some basic stuff"
author: "Francis Yuen"
date: "`r Sys.Date()`"
output:
  tufte::tufte_html:
    toc: yes
    toc_depth: 2
  tufte::tufte_handout:
    citation_package: natbib
    latex_engine: xelatex
  tufte::tufte_book:
    citation_package: natbib
    latex_engine: xelatex
bibliography: skeleton.bib
link-citations: yes
---

```{r setup, include=FALSE}
library(apa)
library(knitr)
library(tidyverse)
library(tufte)
library(here)
library(png)
library(grid)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
```


1. Introduction to R and why it's awesome
2. Install R and RStudio
3. Understand the basics of R
4. Learn how to use simple functions

# Introduction to R

R is essentially another option for computing statistics. It is (initially) less intuitive to use compared to SPSS and Excel, but it has several advantages that make it an awesome tool. Over the next few months, you will most likely consistently ask yourself: "Why am I struggling with this instead of just using SPSS or Excel?" That's totally normal, and you just have to remind yourself of the two major advantages of R:

```{r fig-margin, fig.margin = TRUE, fig.cap = "Workflow in R, image from https://r4ds.had.co.nz/explore-intro.html", fig.width=3.5, fig.height=1, cache=TRUE, message=FALSE, echo = FALSE}
Rworkflow <- readPNG("Images/R_workflow.png")
grid.raster(Rworkflow)
```

1. Flexibility: R has many more options as your computation gets more complicated
2. Reproducibility: R calculations are 100% reproducible, and even manuscripts can be reproducible when used in conjunction with RMarkdown (more on this later)

R is essentially a one-stop-shop for all your research needs: from data cleaning to analysis to visualization, everything can be done in one place!

***

# Installing R and RStudio

To get things started, you will need to download R as well as RStudio:

**For Windows 10/8/7:**

**[R](https://cran.rstudio.com/bin/windows/base/R-3.6.1-win.exe)** and **[RStudio](https://download1.rstudio.org/desktop/windows/RStudio-1.2.5019.exe)**

**For Mac:**

**[R](https://cran.rstudio.com/bin/macosx/R-3.6.1.pkg)** and **[RStudio](https://download1.rstudio.org/desktop/macos/RStudio-1.2.5019.dmg)**

Rstudio is a set of tools that makes R easier to use. For the purposes of this workshop, we will be only working in RStudio (but you still need to install both).

***

# Basics of R

## The language of R

Remember that because R uses 'computer' language, it can be very picky and 'black and white' when it comes to certain things:

- Capitalization: "With" $\neq$ "with"
- Spelling errors: "blue" $\neq$ "bleu"

There are also different types of data. The most common ones that we will be working with are **character** and **numeric**.

- **Character** data are essentially words or letters. You can think of them as individual 'objects', and they need to be surrounded by quotation marks (e.g. "With") when you enter them.

- **Numeric** data are continuous numbers and can be entered as is.

\vspace{12pt}

## Math operations

Now that we have RStudio installed, let's take a look at the different parts of the interface. First, let's explore what R can do by looking at the console. The console is where you give 'commands' to R, ranging anywhere from simple math questions to several lines of code. 

```{r Rconsole figure, fig.margin = FALSE, fig.cap = "Note: the positioning of my console as well as the color scheme displayed here is different from the default. You can arrange your panes by going to Tools -> Global Options -> Pane Layout, and you can change the theme by going to Tools -> Global options -> Appearance.", fig.width=9, fig.height=5, cache=TRUE, message=FALSE, echo = FALSE}
Rworkflow <- readPNG("Images/R_console.png")
grid.raster(Rworkflow)
```

To illustrate, let's ask R to solve a math questions that's literally impossible for an average human to compute:

```{r math question}
9+10
```

Here are some common operations and how to enter them:

```{r operation table, echo = FALSE}
operations <- matrix(c("addition", "subtraction", "multiplication", "division", "power",
                       "+", "-", "*", "/", "^",
                       "2 + 2", "5- 1", "2 * 2", "8 / 2", "2 ^ 2",
                       "4", "4", "4", "4", "4"),
                     ncol = 4, byrow=FALSE)
colnames(operations) <- c("operation", "operator/symbol", "example input", "example output")
kable(operations, align = 'c')
```

One thing to note here is that R doesn't care about spacing: 1+1 and 1   +   1 is treated the same way, so you can organize your eventual code according to how you like it visually.

**Exercise 1** 

Help each other solve some *actually* difficult math problems.

\vspace{12pt}

## Storing variables

Using R like a calculator is fun, but we can also store our answers as temporary variables in our workspace using the <- operator. Try typing the following in your console:

```{r storing variables}
answer <- 3 + 5
```

```{r Renvironment figure, fig.margin = FALSE, fig.cap = "The environment will store anything you define with the <- operator. You can also use = to define objects, but it's not recommended as = has special meaning that are often used for other purposes.", fig.width=9, fig.height=5, cache=TRUE, message=FALSE, echo = FALSE}
Rworkflow <- readPNG("Images/R_environment.png")
grid.raster(Rworkflow)
```

Notice now it doesn't give you the answer as an output, but it stores the answer as an object called "answer" in your workspace (or your Environment). Now, type in answer in your console to recall it:

```{r recall answer}
answer
```

This will be especially useful when you have to do more complex things like applying functions to larger data sets. Notice that you have to type in the variable name every single time you use it, so try to avoid long but more informative variable names like "Number of times baby chose blue". Instead, here are some commons ways people standardize variables:

- choice_blue
- blue.choice.num
- ChoseBlue

Note that none of these variable names have spaces, and this is because R uses white space as a separator, so anything separated by white space is treated as two objects.

It is also useful to have these commands as actual lines that you can rerun instead of a one-time thing, so let's open up an R script. Go to File -> New File -> R script. In your new script, type in the exact same thing as before: answer <- 3 + 5.

Now, if you press Enter, all it will do is move on to the next line. In order to tell R that you want to execute this line, click anywhere on the line you want to run (or to run multiple lines, highlight the lines you want to run) and click the Run button on the top right of your script section, or hold the Ctrl key (command key for Mac users) and press Enter.

```{r R script figure, fig.margin = FALSE, fig.cap = "R scripts allows you to store a series of commands for future use. Press the Run button to execute the line your cursor is currently on or lines that are highlighted. Ctrl + R on Windows or Cmd + R on Macs are the short cuts for running lines in an R script.", fig.width=9, fig.height=5, cache=TRUE, message=FALSE, echo = FALSE}
Rworkflow <- readPNG("Images/R_run.png")
grid.raster(Rworkflow)
```

**Exercise 2**

Pretend you ran 5 babies in a looking time study, and their looking times on the test trial are 5, 7, 15, 21, and 25 seconds. Create a variable to store the sum of their looking time, a variable that represents the number of babies you ran. Finally, using those two variable, create a third variable that represents the mean looking time for your study.

**Challenge:** Instead of doing this in three steps in your console, write three lines in your script that performs these actions and run them all at once!

\vspace{12pt}

# Using functions

## Functions and Arguments

Now we know how to store variables, we can start doing cool things to them using functions. Functions are essentially a series of commands someone built in advance to be applied to a given set of input, and all we have to do is provide the correct input. Some functions are very simple, like `nchar()` which just counts the number of characters in a given object:

```{r counting characters}
nchar("Francis")
```

Some can do useful statistical computations, like `sd()` which calculates the standard deviation of a set of numbers. Generally, functions are used using the format:

function(argument1, argument2, argument3, etc...)

Arguments are the different inputs or settings you can give to a function. Every function has its own unique set of arguments, and they are very well documented. As an example, let's take a look at the function `round()`. First, type in `?round()` in your console, which will give you the explanation of the function. Scroll down to the 'arguments' section, and notice that it takes two main arguments: x and digits. That means you have to specificy x (what number/vector you want rounded) and digits (how many digits to round to). Now that we know what arguments this function takes, try to round 3.14159 to 3 digits:

```{r round pi}
round(x = 3.14159, digits = 3)
```

Awesome! But what if we don't specify and just try to type it in?

```{r round pi 2}
round(3.14159, 3)
```

Notice that it still works because the things we put in for the arguments are in the correct order. However, if we do this:

```{r round pi 3}
round(2, 3.14159)
```

It doesn't work the same way. Generally, it is highly recommended to name your arguments even if you know you are doing it in the correct order because:

1. You can use them out of order (e.g. round(digits = 3, x = 3.14159) will work!)
2. The next person reading your code will know what the heck is going on
3. Future you will know what is going on
4. As functions get more complicated (5+ arguments), you will probably want to keep track to prevent mistakes (e.g. specifying the variable as either between subject or within subject will make a huge difference when doing your anova arguments!)

\vspace{12pt}

## Packages

Where R truly shines is the fact that it is open source, meaning that everyone can contribute to its development. This means that people are constantly building new functions and combining them into 'packages'. The best part? These packages are free for you to use! Instead of being limited by whatever your program offers (like Excel or SPSS) and having to pay subscription, the world is your oyster. To conclude this tutorial and to segway into the next one, we will install two of my favorite packages for reproducible research: "tidyverse" and "here". To install new packages, the command is `install.packages("package_name")`:

- `install.packages("tidyverse")`

- `install.packages("here")`

Before you can use any of your installed packages, you have to first 'load' them by adding them to your current working library using the `library()` function:

```{r library tidyverse and here}
library(tidyverse)
library(here)
```

Now we have some useful packages, we are ready to start tackling some datasets!
